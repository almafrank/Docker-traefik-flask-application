networks:
  proxy:
  db:
    
services:
  traefik:
    image: traefik:v3.5
    command:
      - --api.dashboard=true
      - --providers.docker.exposedbydefault=false
      - --api.insecure=true        # Aktivera Traefiks dashboard (ej för produktion)
      - --providers.docker=true    # Läs labels från Docker
      - --entrypoints.web.address=:80 # Entrypoint på port 80
    ports:
      - "80:80"
      - "8080:8080"                  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - proxy

  #Flask applikation container
  #Om man vill ha flera frontend appar som lastbalanserar måste de ha olika container namn!!
  flaskapp1:
    build: ./flaskapp   # mappen där Dockerfile ligger.Du vill bygga och köra lokalt snabbt, kunna ändra kod och testa direkt.
    #image:
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.flaskapp.entrypoints=web
      - traefik.http.routers.flaskapp.rule=Host(`flaskapp.localhost`)
      - traefik.http.services.flaskapp.loadbalancer.server.port=8000
    volumes:
      - .:/code
    depends_on:
      - redis

    networks:
      - proxy
      - db

  flaskapp2:
    build: ./flaskapp   # mappen där Dockerfile ligger. Du vill bygga och köra lokalt snabbt, kunna ändra kod och testa direkt.
    #image:
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.flaskapp.entrypoints=web
      - traefik.http.routers.flaskapp.rule=Host(`flaskapp.localhost`)
      - traefik.http.services.flaskapp.loadbalancer.server.port=8000
    volumes:
      - .:/code
    depends_on:
      - redis

    networks:
      - proxy
      - db
  #Db redis container
  redis:
    image: redislabs/redismod
    #ports:
    #  - '6379:6379'
    networks:
     - db #existerar i egen nätverk